{
  "cells": [
    {
      "cell_number": 1,
      "cell_type": "markdown",
      "content": "### json파일로 만들기"
    },
    {
      "cell_number": 2,
      "cell_type": "code",
      "content": "import json\n\ndef ipynb_to_json_for_rag(notebook_path, output_path='notebook_for_rag.json'):\n    # 노트북 파일 읽기\n    with open(notebook_path, 'r', encoding='utf-8') as file:\n        notebook = json.load(file)\n    \n    # RAG용 데이터 구조 생성\n    rag_data = []\n    \n    # 각 셀을 순회하며 정보 추출\n    for idx, cell in enumerate(notebook['cells'], 1):\n        cell_info = {\n            'cell_number': idx,\n            'cell_type': cell['cell_type'],\n            'content': ''.join(cell['source']),\n            # 검색에 도움될 수 있는 메타데이터 추가\n            'metadata': {\n                'position': idx,\n                'total_cells': len(notebook['cells'])\n            }\n        }\n        \n        # 코드 셀인 경우 출력값도 저장 (있는 경우)\n        if cell['cell_type'] == 'code' and 'outputs' in cell:\n            outputs = []\n            for output in cell['outputs']:\n                if 'text' in output:\n                    outputs.append({'type': 'text', 'data': ''.join(output['text'])})\n                elif 'data' in output:\n                    if 'text/plain' in output['data']:\n                        outputs.append({\n                            'type': 'text/plain',\n                            'data': ''.join(output['data']['text/plain'])\n                        })\n            if outputs:\n                cell_info['outputs'] = outputs\n        \n        rag_data.append(cell_info)\n    \n    # JSON 파일로 저장\n    with open(output_path, 'w', encoding='utf-8') as f:\n        json.dump(rag_data, f, ensure_ascii=False, indent=2)\n    \n    return rag_data\n\n# 사용 예시\nnotebook_path = '2025-01-13.ipynb'  # 실제 파일 경로로 변경하세요\nrag_data = ipynb_to_json_for_rag(notebook_path)",
      "outputs": []
    }
  ]
}